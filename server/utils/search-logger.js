/**
 * –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 * –î–ª—è production-ready –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
 */

class SearchLogger {
  constructor() {
    this.searchStats = new Map();
    this.slowQueries = [];
    this.popularQueries = new Map();
    this.maxSlowQueries = 100;
    this.maxPopularQueries = 50;
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   * @param {object} searchData - –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∏—Å–∫–µ
   */
  logSearch(searchData) {
    const {
      query,
      normalizedQuery,
      resultCount,
      executionTime,
      userAgent,
      ip,
      userId,
      timestamp = new Date(),
    } = searchData;

    // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (process.env.NODE_ENV === 'development') {
      console.log('üîç Search Query:', {
        query,
        normalizedQuery,
        resultCount,
        executionTime: `${executionTime}ms`,
        timestamp: timestamp.toISOString(),
      });
    }

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.updateSearchStats(query, normalizedQuery, resultCount, executionTime);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    if (executionTime > 1000) { // –∑–∞–ø—Ä–æ—Å—ã –º–µ–¥–ª–µ–Ω–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
      this.trackSlowQuery({
        query,
        normalizedQuery,
        executionTime,
        resultCount,
        timestamp,
        userAgent,
        ip,
        userId,
      });
    }

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    this.trackPopularQuery(normalizedQuery);

    // –í production –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if (process.env.NODE_ENV === 'production') {
      this.sendToMonitoring(searchData);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  updateSearchStats(query, normalizedQuery, resultCount, executionTime) {
    const key = normalizedQuery || query;
    const existing = this.searchStats.get(key) || {
      count: 0,
      totalTime: 0,
      avgTime: 0,
      minTime: Infinity,
      maxTime: 0,
      totalResults: 0,
      avgResults: 0,
      lastSearched: null,
    };

    existing.count++;
    existing.totalTime += executionTime;
    existing.avgTime = existing.totalTime / existing.count;
    existing.minTime = Math.min(existing.minTime, executionTime);
    existing.maxTime = Math.max(existing.maxTime, executionTime);
    existing.totalResults += resultCount;
    existing.avgResults = existing.totalResults / existing.count;
    existing.lastSearched = new Date();

    this.searchStats.set(key, existing);
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
   */
  trackSlowQuery(queryData) {
    this.slowQueries.push(queryData);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞
    if (this.slowQueries.length > this.maxSlowQueries) {
      this.slowQueries.shift();
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –º–µ–¥–ª–µ–Ω–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
    console.warn('‚ö†Ô∏è Slow Search Query:', {
      query: queryData.query,
      executionTime: `${queryData.executionTime}ms`,
      resultCount: queryData.resultCount,
    });
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
   */
  trackPopularQuery(normalizedQuery) {
    if (!normalizedQuery) return;

    const count = this.popularQueries.get(normalizedQuery) || 0;
    this.popularQueries.set(normalizedQuery, count + 1);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä Map
    if (this.popularQueries.size > this.maxPopularQueries) {
      // –£–¥–∞–ª—è–µ–º –Ω–∞–∏–º–µ–Ω–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      const sorted = Array.from(this.popularQueries.entries())
        .sort((a, b) => b[1] - a[1])
        .slice(0, this.maxPopularQueries);
      
      this.popularQueries.clear();
      sorted.forEach(([query, count]) => {
        this.popularQueries.set(query, count);
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è production)
   */
  sendToMonitoring(searchData) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:
    // - Prometheus
    // - DataDog
    // - New Relic
    // - Custom analytics service
    
    // –ü—Ä–∏–º–µ—Ä –¥–ª—è Prometheus (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è):
    // prometheus.searchDuration.observe(searchData.executionTime);
    // prometheus.searchResults.observe(searchData.resultCount);
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∏—Å–∫–∞
   */
  getSearchStats() {
    return {
      totalSearches: Array.from(this.searchStats.values())
        .reduce((sum, stat) => sum + stat.count, 0),
      uniqueQueries: this.searchStats.size,
      avgExecutionTime: this.calculateOverallAvgTime(),
      slowQueries: this.slowQueries.slice(-10), // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      popularQueries: Array.from(this.popularQueries.entries())
        .sort((a, b) => b[1] - a[1])
        .slice(0, 10), // —Ç–æ–ø 10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      searchStats: Object.fromEntries(this.searchStats),
    };
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  calculateOverallAvgTime() {
    const stats = Array.from(this.searchStats.values());
    if (stats.length === 0) return 0;

    const totalTime = stats.reduce((sum, stat) => sum + stat.totalTime, 0);
    const totalCount = stats.reduce((sum, stat) => sum + stat.count, 0);
    
    return totalCount > 0 ? totalTime / totalCount : 0;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏)
   */
  clearStats() {
    this.searchStats.clear();
    this.slowQueries.length = 0;
    this.popularQueries.clear();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
   */
  generatePerformanceReport() {
    const stats = this.getSearchStats();
    
    return {
      summary: {
        totalSearches: stats.totalSearches,
        uniqueQueries: stats.uniqueQueries,
        avgExecutionTime: Math.round(stats.avgExecutionTime * 100) / 100,
        slowQueriesCount: this.slowQueries.length,
      },
      performance: {
        slowQueries: stats.slowQueries.map(q => ({
          query: q.query,
          executionTime: q.executionTime,
          resultCount: q.resultCount,
          timestamp: q.timestamp,
        })),
        fastestQueries: this.getFastestQueries(),
        slowestQueries: this.getSlowestQueries(),
      },
      usage: {
        popularQueries: stats.popularQueries,
        recentQueries: this.getRecentQueries(),
      },
      recommendations: this.generateRecommendations(),
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–∞–º—ã–µ –±—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
   */
  getFastestQueries() {
    return Array.from(this.searchStats.entries())
      .sort((a, b) => a[1].avgTime - b[1].avgTime)
      .slice(0, 5)
      .map(([query, stats]) => ({
        query,
        avgTime: Math.round(stats.avgTime * 100) / 100,
        count: stats.count,
      }));
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–∞–º—ã–µ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
   */
  getSlowestQueries() {
    return Array.from(this.searchStats.entries())
      .sort((a, b) => b[1].avgTime - a[1].avgTime)
      .slice(0, 5)
      .map(([query, stats]) => ({
        query,
        avgTime: Math.round(stats.avgTime * 100) / 100,
        count: stats.count,
      }));
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã
   */
  getRecentQueries() {
    return Array.from(this.searchStats.entries())
      .sort((a, b) => new Date(b[1].lastSearched) - new Date(a[1].lastSearched))
      .slice(0, 10)
      .map(([query, stats]) => ({
        query,
        lastSearched: stats.lastSearched,
        count: stats.count,
      }));
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  generateRecommendations() {
    const recommendations = [];
    const avgTime = this.calculateOverallAvgTime();

    if (avgTime > 500) {
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞');
    }

    if (this.slowQueries.length > 10) {
      recommendations.push('–í—ã—Å–æ–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ë–î');
    }

    const popularQueries = Array.from(this.popularQueries.entries())
      .sort((a, b) => b[1] - a[1]);
    
    if (popularQueries.length > 0) {
      recommendations.push(`–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: "${popularQueries[0][0]}"`);
    }

    return recommendations;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
const searchLogger = new SearchLogger();

export default searchLogger;
