/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ –º–∞–Ω–≥–∏
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –ø–æ–∏—Å–∫–∞: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Ç–æ—á–Ω–æ—Å—Ç—å
 * –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
 */

import BookStorage from '../server/storage/book.js';
import searchLogger from '../server/utils/search-logger.js';

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function assert(condition, message) {
  if (!condition) {
    throw new Error(`Assertion failed: ${message}`);
  }
}

function assertEqual(actual, expected, message) {
  if (actual !== expected) {
    throw new Error(
      `Assertion failed: ${message}. Expected: ${expected}, Actual: ${actual}`,
    );
  }
}

function assertNotNull(value, message) {
  if (value === null || value === undefined) {
    throw new Error(`Assertion failed: ${message}. Value is null or undefined`);
  }
}

async function runTests() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞...\n');

  const bookStorage = new BookStorage();
  let testsPassed = 0;
  let testsFailed = 0;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
  async function runTest(testName, testFunction) {
    try {
      console.log(`  ‚úì ${testName}`);
      await testFunction();
      testsPassed++;
    } catch (error) {
      console.log(`  ‚úó ${testName}`);
      console.log(`    –û—à–∏–±–∫–∞: ${error.message}`);
      testsFailed++;
    }
  }

  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∏—Å–∫–∞
  searchLogger.clearStats();

  console.log('üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...');

  await runTest('–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', () => {
    const testCases = [
      { input: 'One Piece', expected: 'one piece' },
      { input: 'ONE PIECE', expected: 'one piece' },
      { input: '  One   Piece  ', expected: 'one piece' },
      { input: 'One-Piece', expected: 'one piece' },
      { input: '–ù–∞—Ä—É—Ç–æ', expected: '–Ω–∞—Ä—É—Ç–æ' },
      { input: '–Å–∂–∏–∫', expected: '–µ–∂–∏–∫' },
    ];

    testCases.forEach(({ input, expected }) => {
      const result = bookStorage.normalizeSearchTerm(input);
      assertEqual(result, expected, `–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è "${input}"`);
    });
  });

  await runTest('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤', () => {
    const testCases = [
      { input: 'One!@#$%Piece', expected: 'one piece' },
      { input: 'Attack.on.Titan', expected: 'attack on titan' },
      { input: 'Dragon/Ball\\Z', expected: 'dragon ball z' },
    ];

    testCases.forEach(({ input, expected }) => {
      const result = bookStorage.normalizeSearchTerm(input);
      assertEqual(
        result,
        expected,
        `–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ "${input}"`,
      );
    });
  });

  await runTest('–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', () => {
    const invalidInputs = [null, undefined, '', '   ', 123, {}];

    invalidInputs.forEach((input) => {
      const result = bookStorage.normalizeSearchTerm(input);
      assertEqual(result, '', `–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤—Ö–æ–¥–∞: ${input}`);
    });
  });

  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π...');

  await runTest('–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π', () => {
    const condition = bookStorage.createSearchCondition('One Piece');

    assertNotNull(condition, '–£—Å–ª–æ–≤–∏–µ –ø–æ–∏—Å–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å null');
    assert(condition.hasOwnProperty(':or'), '–£—Å–ª–æ–≤–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å :or');
    assert(Array.isArray(condition[':or']), '–£—Å–ª–æ–≤–∏–µ :or –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
    assert(condition[':or'].length > 0, '–ú–∞—Å—Å–∏–≤ —É—Å–ª–æ–≤–∏–π –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    const exactMatch = condition[':or'].find(
      (c) => c.name?.ilike === 'one piece',
    );
    assertNotNull(exactMatch, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ª–æ–≤–∏–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    const partialMatch = condition[':or'].find(
      (c) => c.name?.ilike === '%one piece%',
    );
    assertNotNull(
      partialMatch,
      '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ª–æ–≤–∏–µ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è',
    );
  });

  await runTest('–°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –¥–ª—è –º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', () => {
    const condition = bookStorage.createSearchCondition('Attack on Titan');

    assertNotNull(condition, '–£—Å–ª–æ–≤–∏–µ –ø–æ–∏—Å–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å null');
    assert(condition.hasOwnProperty(':or'), '–£—Å–ª–æ–≤–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å :or');

    // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ª–æ–≤–∞–º
    const wordSearch = condition[':or'].find((c) => c[':and']);
    assertNotNull(wordSearch, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º');
    assert(
      Array.isArray(wordSearch[':and']),
      '–£—Å–ª–æ–≤–∏–µ :and –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º',
    );
    assertEqual(
      wordSearch[':and'].length,
      3,
      '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 —Å–ª–æ–≤–∞: attack, on, titan',
    );
  });

  await runTest('–í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä—É', () => {
    const condition = bookStorage.createSearchCondition(
      'One Piece',
      'name',
      'one piece',
    );

    assertNotNull(condition, '–£—Å–ª–æ–≤–∏–µ –ø–æ–∏—Å–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å null');
    assert(condition.hasOwnProperty(':or'), '–£—Å–ª–æ–≤–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å :or');

    // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä—É
    const authorSearch = condition[':or'].find((c) => c['author.name']);
    assertNotNull(authorSearch, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä—É');
    assertEqual(
      authorSearch['author.name'].ilike,
      '%one piece%',
      '–£—Å–ª–æ–≤–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä—É',
    );
  });

  await runTest('–í–æ–∑–≤—Ä–∞—Ç null –¥–ª—è –ø—É—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', () => {
    const condition1 = bookStorage.createSearchCondition('');
    const condition2 = bookStorage.createSearchCondition('  ');

    assertEqual(condition1, null, '–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å null');
    assertEqual(condition2, null, '–°—Ç—Ä–æ–∫–∞ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å null');
  });

  console.log('\nüîÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fuzzy search...');

  await runTest('–°–æ–∑–¥–∞–Ω–∏–µ fuzzy search —É—Å–ª–æ–≤–∏–π –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', () => {
    const condition = bookStorage.createFuzzySearchCondition('Attack on Titan');

    assertNotNull(condition, 'Fuzzy —É—Å–ª–æ–≤–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å null');
    assert(
      condition.hasOwnProperty(':or'),
      'Fuzzy —É—Å–ª–æ–≤–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å :or',
    );
    assert(
      Array.isArray(condition[':or']),
      'Fuzzy —É—Å–ª–æ–≤–∏–µ :or –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º',
    );
    assert(
      condition[':or'].length > 0,
      '–ú–∞—Å—Å–∏–≤ fuzzy —É—Å–ª–æ–≤–∏–π –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
    );
  });

  await runTest('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', () => {
    const normalCondition = bookStorage.createSearchCondition('ab');
    const fuzzyCondition = bookStorage.createFuzzySearchCondition('ab');

    // –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ fuzzy –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–æ—Ç –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á—Ç–æ –∏ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
    assertEqual(
      JSON.stringify(fuzzyCondition),
      JSON.stringify(normalCondition),
      'Fuzzy –∏ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤',
    );
  });

  await runTest('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä—É –≤ fuzzy —Ä–µ–∂–∏–º–µ', () => {
    const condition = bookStorage.createFuzzySearchCondition(
      'One Piece',
      'name',
      'oda',
    );

    assertNotNull(condition, 'Fuzzy —É—Å–ª–æ–≤–∏–µ —Å –∞–≤—Ç–æ—Ä–æ–º –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å null');
    assert(
      condition.hasOwnProperty(':or'),
      'Fuzzy —É—Å–ª–æ–≤–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å :or',
    );

    // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä—É
    const authorSearch = condition[':or'].find((c) => c['author.name']);
    assertNotNull(
      authorSearch,
      '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä—É –≤ fuzzy —Ä–µ–∂–∏–º–µ',
    );
  });

  console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞...');

  await runTest('–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', () => {
    searchLogger.clearStats(); // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º

    const searchData = {
      query: 'One Piece',
      normalizedQuery: 'one piece',
      resultCount: 1,
      executionTime: 50,
      timestamp: new Date(),
    };

    searchLogger.logSearch(searchData);

    const stats = searchLogger.getSearchStats();
    assertEqual(stats.totalSearches, 1, '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤');
    assertEqual(stats.uniqueQueries, 1, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
  });

  await runTest('–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', () => {
    searchLogger.clearStats(); // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º

    const slowSearchData = {
      query: 'Slow Query',
      normalizedQuery: 'slow query',
      resultCount: 0,
      executionTime: 1500, // –º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      timestamp: new Date(),
    };

    searchLogger.logSearch(slowSearchData);

    const stats = searchLogger.getSearchStats();
    assertEqual(stats.slowQueries.length, 1, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
    assertEqual(
      stats.slowQueries[0].query,
      'Slow Query',
      '–ó–∞–ø—Ä–æ—Å –≤ —Å–ø–∏—Å–∫–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö',
    );
  });

  await runTest('–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', () => {
    searchLogger.clearStats(); // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º

    // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
    for (let i = 0; i < 5; i++) {
      searchLogger.logSearch({
        query: 'One Piece',
        normalizedQuery: 'one piece',
        resultCount: 1,
        executionTime: 20,
        timestamp: new Date(),
      });
    }

    const stats = searchLogger.getSearchStats();
    assert(stats.popularQueries.length > 0, '–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã');
    assertEqual(
      stats.popularQueries[0][0],
      'one piece',
      '–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å',
    );
    assertEqual(
      stats.popularQueries[0][1],
      5,
      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞',
    );
  });

  await runTest('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', () => {
    searchLogger.clearStats(); // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    const queries = [
      { query: 'One Piece', time: 20 },
      { query: 'Naruto', time: 30 },
      { query: 'Attack on Titan', time: 1200 }, // –º–µ–¥–ª–µ–Ω–Ω—ã–π
    ];

    queries.forEach(({ query, time }) => {
      searchLogger.logSearch({
        query,
        normalizedQuery: query.toLowerCase(),
        resultCount: 1,
        executionTime: time,
        timestamp: new Date(),
      });
    });

    const report = searchLogger.generatePerformanceReport();

    assertNotNull(report.summary, '–û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å summary');
    assertNotNull(report.performance, '–û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å performance');
    assertNotNull(report.usage, '–û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å usage');
    assertNotNull(
      report.recommendations,
      '–û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å recommendations',
    );

    assertEqual(
      report.summary.totalSearches,
      3,
      '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤ –≤ –æ—Ç—á–µ—Ç–µ',
    );
    assertEqual(
      report.performance.slowQueries.length,
      1,
      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ—Ç—á–µ—Ç–µ',
    );
    assert(
      Array.isArray(report.recommendations),
      '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º',
    );
  });

  console.log('\nüîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ–∏—Å–∫–∞...');

  await runTest('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏', async () => {
    const startTime = Date.now();

    const query = { name: 'One Piece' };
    const result = await bookStorage.catalogSearch(query);

    const executionTime = Date.now() - startTime;

    assertNotNull(result, '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null');
    assert(
      executionTime < 1000,
      `–ü–æ–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã (${executionTime}ms)`,
    );
  });

  await runTest('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', async () => {
    const testQueries = [
      { name: 'One Piece' },
      { name: 'one piece' },
      { name: 'ONE PIECE' },
      { name: 'piece' },
    ];

    for (const query of testQueries) {
      const result = await bookStorage.catalogSearch(query);
      assertNotNull(result, `–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ${JSON.stringify(query)}`);
      assert(
        result.hasOwnProperty('items'),
        '–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å items',
      );
      assert(
        result.hasOwnProperty('total'),
        '–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å total',
      );
    }
  });

  await runTest('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', async () => {
    const query = { name: 'NonExistentManga12345' };
    const result = await bookStorage.catalogSearch(query);

    assertNotNull(
      result,
      '–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null –¥–∞–∂–µ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤',
    );
    assert(Array.isArray(result.items), 'items –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
    assertEqual(
      result.items.length,
      0,
      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞',
    );
    assertEqual(
      result.total,
      0,
      '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞',
    );
  });

  await runTest('–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤', async () => {
    const query = {
      name: 'manga',
      status: 'done',
      types: 'manga',
    };

    const result = await bookStorage.catalogSearch(query);
    assertNotNull(
      result,
      '–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null',
    );
  });

  console.log('\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞...');

  await runTest('–ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', async () => {
    const iterations = 5; // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const times = [];

    for (let i = 0; i < iterations; i++) {
      const startTime = Date.now();
      await bookStorage.catalogSearch({ name: 'One Piece' });
      const executionTime = Date.now() - startTime;
      times.push(executionTime);
    }

    const avgTime = times.reduce((sum, time) => sum + time, 0) / times.length;
    assert(
      avgTime < 200,
      `–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 200–º—Å (${avgTime.toFixed(2)}ms)`,
    );
  });

  await runTest('–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', async () => {
    const complexQuery = {
      name: 'Attack on Titan manga adventure',
      status: 'done',
      types: 'manga',
      yearFrom: 2000,
    };

    const startTime = Date.now();
    const result = await bookStorage.catalogSearch(complexQuery);
    const executionTime = Date.now() - startTime;

    assertNotNull(result, '–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null');
    assert(
      executionTime < 1000,
      `–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω—å—à–µ 1000–º—Å (${executionTime}ms)`,
    );
  });

  console.log('\nüî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤...');

  await runTest('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', async () => {
    const longQuery = 'a'.repeat(1000);
    const result = await bookStorage.catalogSearch({ name: longQuery });

    assertNotNull(result, '–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null');
    assert(
      Array.isArray(result.items),
      'items –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞',
    );
  });

  await runTest('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö', async () => {
    const specialQueries = [
      '!@#$%^&*()',
      'SELECT * FROM book',
      '<script>alert("xss")</script>',
      '\\n\\r\\t',
    ];

    for (const query of specialQueries) {
      const result = await bookStorage.catalogSearch({ name: query });
      assertNotNull(
        result,
        `–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ "${query}" –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null`,
      );
      assert(
        Array.isArray(result.items),
        `items –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "${query}"`,
      );
    }
  });

  await runTest('–û–±—Ä–∞–±–æ—Ç–∫–∞ Unicode —Å–∏–º–≤–æ–ª–æ–≤', async () => {
    const unicodeQueries = [
      'üéå –º–∞–Ω–≥–∞',
      '–ù–∞—Ä—É—Ç–æ ÂøçËÄÖ',
      '–ê—Ç–∞–∫–∞ —Ç–∏—Ç–∞–Ω–æ–≤ ÈÄ≤ÊíÉ„ÅÆÂ∑®‰∫∫',
      '–í–∞–Ω –ü–∏—Å „ÉØ„É≥„Éî„Éº„Çπ',
    ];

    for (const query of unicodeQueries) {
      const result = await bookStorage.catalogSearch({ name: query });
      assertNotNull(
        result,
        `–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è Unicode –∑–∞–ø—Ä–æ—Å–∞ "${query}" –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null`,
      );
      assert(
        Array.isArray(result.items),
        `items –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –¥–ª—è Unicode –∑–∞–ø—Ä–æ—Å–∞ "${query}"`,
      );
    }
  });

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${testsPassed}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${testsFailed}`);
  console.log(
    `üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${testsPassed}/${testsPassed + testsFailed}`,
  );

  if (testsFailed === 0) {
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } else {
    console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
  }

  return testsFailed === 0;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests().catch(console.error);
