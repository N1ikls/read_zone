import knex from 'knex';
import fetch from 'node-fetch';

const db = knex({
  client: 'pg',
  connection: {
    port: 5555,
    host: 'localhost',
    user: 'botcheks',
    password: 'fekfrkenfekrjne3434',
    database: 'read_zone_db',
  }
});

const API_BASE = 'http://localhost:3001/api';

async function createTestNovelties() {
  try {
    console.log('üìö –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–æ–≤–∏–Ω–æ–∫...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const authors = await db('author').select('id', 'name').limit(3);
    const users = await db('user').select('id', 'name').limit(3);
    
    if (authors.length === 0 || users.length === 0) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–≤—Ç–æ—Ä–æ–≤ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }
    
    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ—Ä–æ–≤: ${authors.length}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–∏–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    const testBooks = [];
    const now = new Date();
    
    for (let i = 0; i < 10; i++) {
      // –°–æ–∑–¥–∞–µ–º –∫–Ω–∏–≥–∏ –≤ —Ä–∞–∑–Ω—ã–µ –¥–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
      const daysAgo = Math.floor(Math.random() * 7);
      const createdAt = new Date(now);
      createdAt.setDate(createdAt.getDate() - daysAgo);
      
      const author = authors[i % authors.length];
      const user = users[i % users.length];
      
      const bookData = {
        name: `–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–∏–Ω–∫–∞ ${i + 1}`,
        description: `–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–Ω–∏–≥–∏ ${i + 1} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–æ–≤–∏–Ω–æ–∫`,
        author_id: author.id,
        translator_id: user.id,
        status: Math.random() > 0.3 ? 'progress' : 'done', // 70% –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, 30% –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        type: ['manga', 'manhva', 'manhua'][Math.floor(Math.random() * 3)],
        release_type: 'single',
        age_rate: '0',
        created_by: user.id,
        updated_by: user.id,
        created_at: createdAt,
        updated_at: createdAt
      };
      
      testBooks.push(bookData);
    }
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–∏–≥–∏
    const insertedBooks = await db('book').insert(testBooks).returning(['id', 'name', 'author_id']);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${insertedBooks.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–Ω–∏–≥`);
    
    // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏
    for (const book of insertedBooks) {
      const chaptersCount = Math.floor(Math.random() * 5) + 1; // 1-5 –≥–ª–∞–≤
      
      for (let j = 0; j < chaptersCount; j++) {
        const chapterData = {
          book_id: book.id,
          number: j + 1,
          name: `–ì–ª–∞–≤–∞ ${j + 1}`,
          content: `–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥–ª–∞–≤—ã ${j + 1} –∫–Ω–∏–≥–∏ "${book.name}"`,
          is_public: true,
          status: 'done',
          created_by: users[0].id,
          updated_by: users[0].id
        };
        
        await db('chapter').insert(chapterData);
      }
    }
    
    console.log(`üìñ –°–æ–∑–¥–∞–Ω–æ –≥–ª–∞–≤—ã –¥–ª—è –≤—Å–µ—Ö –∫–Ω–∏–≥`);
    
    return insertedBooks.map(book => book.id);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    return [];
  }
}

async function testNoveltiesAPI() {
  try {
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –Ω–æ–≤–∏–Ω–æ–∫...');
    
    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–∏–Ω–æ–∫ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è)
    console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–∏:');
    const response1 = await fetch(`${API_BASE}/books/novelties`);
    const data1 = await response1.json();
    
    if (data1.success) {
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${data1.data.books.length} –Ω–æ–≤–∏–Ω–æ–∫`);
      console.log(`üìä –í—Å–µ–≥–æ –Ω–æ–≤–∏–Ω–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é: ${data1.meta.total}`);
      console.log(`üîÑ –†–æ—Ç–∞—Ü–∏—è: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${data1.meta.rotation.currentPage} –∏–∑ ${data1.meta.rotation.totalPages}`);
      console.log(`‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: ${data1.meta.rotation.nextRotationIn}—Å`);
      console.log(`üíæ –ò–∑ –∫—ç—à–∞: ${data1.meta.cache.fromCache}`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–∏–Ω–æ–∫');
    }
    
    // –¢–µ—Å—Ç 2: –†—É—á–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç —Ä—É—á–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏:');
    const response2 = await fetch(`${API_BASE}/books/novelties?manual=true&offset=3&limit=4`);
    const data2 = await response2.json();
    
    if (data2.success) {
      console.log(`‚úÖ –†—É—á–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è: –ø–æ–ª—É—á–µ–Ω–æ ${data2.data.books.length} –Ω–æ–≤–∏–Ω–æ–∫ —Å offset ${data2.meta.offset}`);
      console.log(`üéØ –°–ª–µ–¥—É—é—â–∏–π offset: ${data2.meta.nextOffset}`);
      console.log(`üíæ –ò–∑ –∫—ç—à–∞: ${data2.meta.cache.fromCache}`);
    }
    
    // –¢–µ—Å—Ç 3: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫—ç—à–∞)
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:');
    const response3 = await fetch(`${API_BASE}/books/novelties`);
    const data3 = await response3.json();
    
    if (data3.success) {
      console.log(`üíæ –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –∏–∑ –∫—ç—à–∞: ${data3.meta.cache.fromCache}`);
      console.log(`üîë –ö–ª—é—á –∫—ç—à–∞: ${data3.meta.cache.cacheKey}`);
    }
    
    // –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
    console.log('\n4Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:');
    const response4 = await fetch(`${API_BASE}/books/novelties?stats=true`);
    const data4 = await response4.json();
    
    if (data4.success) {
      console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:`, data4.cache);
    }
    
    // –¢–µ—Å—Ç 5: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
    const startTime = Date.now();
    const promises = [];
    
    for (let i = 0; i < 10; i++) {
      promises.push(fetch(`${API_BASE}/books/novelties?manual=true&offset=${i * 2}`));
    }
    
    await Promise.all(promises);
    const endTime = Date.now();
    
    console.log(`‚ö° 10 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞ ${endTime - startTime}–º—Å`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error);
  }
}

async function testRotationLogic() {
  try {
    console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Ä–æ—Ç–∞—Ü–∏–∏...');
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —Ä–æ—Ç–∞—Ü–∏–∏
    const { NoveltyRotation } = await import('../server/utils/novelty-rotation.js');
    
    const rotation = new NoveltyRotation(1); // –†–æ—Ç–∞—Ü–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const testCases = [
      { total: 10, limit: 3 },
      { total: 5, limit: 6 },
      { total: 0, limit: 3 },
      { total: 15, limit: 4 }
    ];
    
    for (const testCase of testCases) {
      console.log(`\nüìä –¢–µ—Å—Ç: ${testCase.total} –Ω–æ–≤–∏–Ω–æ–∫, –ª–∏–º–∏—Ç ${testCase.limit}`);
      
      const offset = rotation.getTimeBasedOffset(testCase.total, testCase.limit);
      const info = rotation.getRotationInfo(testCase.total, testCase.limit);
      const stats = rotation.getRotationStats(testCase.total, testCase.limit);
      
      console.log(`  Offset: ${offset}`);
      console.log(`  –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${info.currentPage}/${info.totalPages}`);
      console.log(`  –†–æ—Ç–∞—Ü–∏–π –≤ –¥–µ–Ω—å: ${stats.rotationsPerDay}`);
      console.log(`  –î–Ω–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö: ${stats.daysToShowAllPages}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–æ—Ç–∞—Ü–∏–∏:', error);
  }
}

async function cleanupTestData(bookIds) {
  try {
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    if (bookIds && bookIds.length > 0) {
      // –£–¥–∞–ª—è–µ–º –≥–ª–∞–≤—ã
      await db('chapter').whereIn('book_id', bookIds).delete();
      
      // –£–¥–∞–ª—è–µ–º –∫–Ω–∏–≥–∏
      await db('book').whereIn('id', bookIds).delete();
      
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${bookIds.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–Ω–∏–≥ –∏ –∏—Ö –≥–ª–∞–≤—ã`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error);
  }
}

async function runTests() {
  let testBookIds = [];
  
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–æ–≤–∏–Ω–æ–∫\n');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    testBookIds = await createTestNovelties();
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    await testNoveltiesAPI();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Ä–æ—Ç–∞—Ü–∏–∏
    await testRotationLogic();
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
  } finally {
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await cleanupTestData(testBookIds);
    await db.destroy();
  }
}

runTests();
