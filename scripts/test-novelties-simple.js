import knex from 'knex';

const db = knex({
  client: 'pg',
  connection: {
    port: 5555,
    host: 'localhost',
    user: 'botcheks',
    password: 'fekfrkenfekrjne3434',
    database: 'read_zone_db',
  }
});

async function testNoveltiesLogic() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –Ω–æ–≤–∏–Ω–æ–∫...');
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ä–æ—Ç–∞—Ü–∏–∏
    console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Ä–æ—Ç–∞—Ü–∏–∏:');
    const { NoveltyRotation } = await import('../server/utils/novelty-rotation.js');
    
    const rotation = new NoveltyRotation(5); // 5 –º–∏–Ω—É—Ç
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
    const testCases = [
      { total: 10, limit: 3, name: '10 –Ω–æ–≤–∏–Ω–æ–∫, –ª–∏–º–∏—Ç 3' },
      { total: 5, limit: 6, name: '5 –Ω–æ–≤–∏–Ω–æ–∫, –ª–∏–º–∏—Ç 6 (–±–æ–ª—å—à–µ —á–µ–º –µ—Å—Ç—å)' },
      { total: 0, limit: 3, name: '0 –Ω–æ–≤–∏–Ω–æ–∫' },
      { total: 15, limit: 4, name: '15 –Ω–æ–≤–∏–Ω–æ–∫, –ª–∏–º–∏—Ç 4' }
    ];
    
    for (const testCase of testCases) {
      console.log(`\nüìä ${testCase.name}:`);
      
      const offset = rotation.getTimeBasedOffset(testCase.total, testCase.limit);
      const info = rotation.getRotationInfo(testCase.total, testCase.limit);
      const nextOffset = rotation.getNextOffset(offset, testCase.total, testCase.limit);
      const prevOffset = rotation.getPreviousOffset(offset, testCase.total, testCase.limit);
      
      console.log(`  –¢–µ–∫—É—â–∏–π offset: ${offset}`);
      console.log(`  –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${info.currentPage}/${info.totalPages}`);
      console.log(`  –°–ª–µ–¥—É—é—â–∏–π offset: ${nextOffset}`);
      console.log(`  –ü—Ä–µ–¥—ã–¥—É—â–∏–π offset: ${prevOffset}`);
      console.log(`  –†–æ—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞: ${info.isRotating}`);
      console.log(`  –î–æ —Å–ª–µ–¥—É—é—â–µ–π —Ä–æ—Ç–∞—Ü–∏–∏: ${info.nextRotationIn}—Å`);
    }
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:');
    const { generateCacheKey, noveltiesCache, cacheHelpers } = await import('../server/utils/cache.js');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏ –∫—ç—à–∞
    const autoKey = generateCacheKey(0, 6, false);
    const manualKey = generateCacheKey(6, 6, true);
    
    console.log(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–ª—é—á: ${autoKey}`);
    console.log(`–†—É—á–Ω–æ–π –∫–ª—é—á: ${manualKey}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ
    const testData = { books: [], total: 10, offset: 0 };
    noveltiesCache.set('test-key', testData, 1000);
    
    const cached = noveltiesCache.get('test-key');
    console.log(`–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –ø–æ–ª—É—á–µ–Ω—ã: ${cached !== null}`);
    console.log(`–†–∞–∑–º–µ—Ä –∫—ç—à–∞: ${noveltiesCache.size()}`);
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º SQL –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–∏–Ω–æ–∫
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç SQL –∑–∞–ø—Ä–æ—Å–∞:');
    
    // –î–∞—Ç–∞ 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
    const weekAgo = new Date();
    weekAgo.setDate(weekAgo.getDate() - 7);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –∑–∞ –Ω–µ–¥–µ–ª—é
    const weeklyBooks = await db('book')
      .where('created_at', '>=', weekAgo)
      .whereIn('status', ['progress', 'done'])
      .count('* as count')
      .first();
    
    console.log(`–ö–Ω–∏–≥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: ${weeklyBooks.count}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–∏–≥–∏ —Å –≥–ª–∞–≤–∞–º–∏
    const booksWithChapters = await db('book')
      .where('created_at', '>=', weekAgo)
      .whereIn('status', ['progress', 'done'])
      .where(function() {
        this.whereExists(function() {
          this.select('*')
            .from('chapter')
            .whereRaw('chapter.book_id = book.id')
            .where(function() {
              this.where('status', 'done')
                .orWhere('is_public', true);
            });
        });
      })
      .count('* as count')
      .first();
    
    console.log(`–ö–Ω–∏–≥ —Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º–∏ –≥–ª–∞–≤–∞–º–∏: ${booksWithChapters.count}`);
    
    // –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –Ω–æ–≤–∏–Ω–∫—É
    console.log('\n4Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –Ω–æ–≤–∏–Ω–∫–∏:');
    
    const authors = await db('author').select('id').limit(1);
    const users = await db('user').select('id').limit(1);
    
    if (authors.length > 0 && users.length > 0) {
      const testBook = {
        name: '–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–∏–Ω–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–Ω–∏–≥–∏',
        author_id: authors[0].id,
        translator_id: users[0].id,
        status: 'progress',
        type: 'manga',
        release_type: 'single',
        age_rate: '0',
        created_by: users[0].id,
        updated_by: users[0].id
      };
      
      const [bookId] = await db('book').insert(testBook).returning('id');
      console.log(`–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∫–Ω–∏–≥–∞ —Å ID: ${bookId.id}`);
      
      // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤—É
      const testChapter = {
        book_id: bookId.id,
        number: 1,
        name: '–¢–µ—Å—Ç–æ–≤–∞—è –≥–ª–∞–≤–∞',
        content: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–π –≥–ª–∞–≤—ã',
        is_public: true,
        status: 'done',
        created_by: users[0].id,
        updated_by: users[0].id
      };
      
      await db('chapter').insert(testChapter);
      console.log('–°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –≥–ª–∞–≤–∞');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–∏–≥–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –Ω–æ–≤–∏–Ω–∫–∏
      const noveltiesCount = await db('book')
        .where('created_at', '>=', weekAgo)
        .whereIn('status', ['progress', 'done'])
        .where(function() {
          this.whereExists(function() {
            this.select('*')
              .from('chapter')
              .whereRaw('chapter.book_id = book.id')
              .where(function() {
                this.where('status', 'done')
                  .orWhere('is_public', true);
              });
          });
        })
        .count('* as count')
        .first();
      
      console.log(`–ù–æ–≤–∏–Ω–æ–∫ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: ${noveltiesCount.count}`);
      
      // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      await db('chapter').where('book_id', bookId.id).delete();
      await db('book').where('id', bookId.id).delete();
      console.log('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    }
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ª–æ–≥–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await db.destroy();
  }
}

testNoveltiesLogic();
