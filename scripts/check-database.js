import knex from 'knex';
import config from '../knex.js';

const db = knex(config);

async function checkDatabase() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö read_zone...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...');
    await db.raw('SELECT 1');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    console.log('üóÇÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π...');
    const migrations = await db('knex_migrations').count('* as count').first();
    console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: ${migrations.count}\n`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∏—Ö –¥–∞–Ω–Ω—ã–µ
    const tables = [
      { name: 'fandom', label: '–§–∞–Ω–¥–æ–º—ã' },
      { name: 'genre', label: '–ñ–∞–Ω—Ä—ã' },
      { name: 'tag', label: '–¢–µ–≥–∏' },
      { name: 'user', label: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' },
      { name: 'author', label: '–ê–≤—Ç–æ—Ä—ã' },
      { name: 'book', label: '–ö–Ω–∏–≥–∏' },
      { name: 'book_fandom', label: '–°–≤—è–∑–∏ –∫–Ω–∏–≥–∞-—Ñ–∞–Ω–¥–æ–º' },
      { name: 'book_genre', label: '–°–≤—è–∑–∏ –∫–Ω–∏–≥–∞-–∂–∞–Ω—Ä' },
      { name: 'notifications', label: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' }
    ];
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:');
    for (const table of tables) {
      try {
        const count = await db(table.name).count('* as count').first();
        const status = count.count > 0 ? '‚úÖ' : '‚ö†Ô∏è';
        console.log(`${status} ${table.label}: ${count.count} –∑–∞–ø–∏—Å–µ–π`);
      } catch (error) {
        console.log(`‚ùå ${table.label}: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞`);
      }
    }
    
    console.log('\nüéØ –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ñ–∞–Ω–¥–æ–º–æ–≤
    const fandoms = await db('fandom').select('name').limit(3);
    if (fandoms.length > 0) {
      console.log('üìö –§–∞–Ω–¥–æ–º—ã:');
      fandoms.forEach(f => console.log(`   - ${f.name}`));
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∂–∞–Ω—Ä–æ–≤
    const genres = await db('genre').select('name').limit(3);
    if (genres.length > 0) {
      console.log('üé≠ –ñ–∞–Ω—Ä—ã:');
      genres.forEach(g => console.log(`   - ${g.name}`));
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–Ω–∏–≥
    const books = await db('book').select('name').limit(3);
    if (books.length > 0) {
      console.log('üìñ –ö–Ω–∏–≥–∏:');
      books.forEach(b => console.log(`   - ${b.name}`));
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
    const admin = await db('user').where('email', 'admin1@example.com').first();
    if (admin) {
      console.log(`üë§ –ê–¥–º–∏–Ω: ${admin.name} (${admin.email})`);
    }
    
    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    console.log('üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: npm run dev');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    console.error(error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
      console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω');
      console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ knex.js');
      console.log('3. –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: createdb -U postgres read_zone_db');
    }
    
    process.exit(1);
  } finally {
    await db.destroy();
  }
}

checkDatabase();
