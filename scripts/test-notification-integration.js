import knex from 'knex';

const db = knex({
  client: 'pg',
  connection: {
    port: 5432,
    host: 'localhost',
    user: 'postgres',
    password: 'postgres',
    database: 'read_zone_db',
  },
});

async function testNotificationIntegration() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await db('user').select('id', 'name', 'email').limit(3);
    if (users.length < 2) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return;
    }

    const author = users[0];
    const subscriber = users[1];

    console.log(`üë§ –ê–≤—Ç–æ—Ä: ${author.name} (${author.email})`);
    console.log(`üë§ –ü–æ–¥–ø–∏—Å—á–∏–∫: ${subscriber.name} (${subscriber.email})`);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    await db('user_subscriber')
      .insert({
        user_id: author.id,
        subscriber_id: subscriber.id,
      })
      .onConflict(['user_id', 'subscriber_id'])
      .ignore();

    console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');

    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã author
    const authorRecord = await db('author').first();
    if (!authorRecord) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ—Ä –≤ —Ç–∞–±–ª–∏—Ü–µ author');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–Ω–∏–≥—É
    const bookData = {
      name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–∏–≥–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–Ω–∏–≥–∏',
      author_id: authorRecord.id,
      translator_id: author.id,
      status: 'progress',
      type: 'manga',
      release_type: 'single',
      age_rate: '0',
      created_by: author.id,
      updated_by: author.id,
    };

    const [bookId] = await db('book').insert(bookData).returning('id');
    const book = await db('book').where('id', bookId.id).first();

    console.log(`üìö –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–∏–≥–∞: "${book.name}" (ID: ${book.id})`);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–ª–∞–¥–∫—É –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (users[2]) {
      await db('bookmark')
        .insert({
          book_id: book.id,
          user_id: users[2].id,
          type: 'favorite',
        })
        .onConflict(['book_id', 'user_id'])
        .ignore();

      console.log(`üîñ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–∫–ª–∞–¥–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${users[2].name}`);
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≥–ª–∞–≤—É
    const chapterData = {
      book_id: book.id,
      number: 1,
      name: '–¢–µ—Å—Ç–æ–≤–∞—è –≥–ª–∞–≤–∞',
      content: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–π –≥–ª–∞–≤—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
      is_public: true,
      status: 'done',
      created_by: author.id,
      updated_by: author.id,
    };

    const [chapterId] = await db('chapter').insert(chapterData).returning('id');
    const chapter = await db('chapter').where('id', chapterId.id).first();

    console.log(`üìñ –°–æ–∑–¥–∞–Ω–∞ –≥–ª–∞–≤–∞: "${chapter.name}" (ID: ${chapter.id})`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await new Promise((resolve) => setTimeout(resolve, 1000)); // –ñ–¥–µ–º —Å–µ–∫—É–Ω–¥—É

    const notifications = await db('notifications')
      .where('user_id', subscriber.id)
      .orderBy('created_at', 'desc')
      .limit(5);

    console.log(
      `\nüìã –ù–∞–π–¥–µ–Ω–æ ${notifications.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞:`,
    );
    notifications.forEach((notif, index) => {
      const status = notif.is_read ? '‚úÖ' : 'üîî';
      console.log(`${index + 1}. ${status} [${notif.type}] ${notif.title}`);
      console.log(`   ${notif.message}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–∫–ª–∞–¥–∫–æ–π
    if (users[2]) {
      const bookmarkNotifications = await db('notifications')
        .where('user_id', users[2].id)
        .orderBy('created_at', 'desc')
        .limit(3);

      console.log(
        `\nüìã –ù–∞–π–¥–µ–Ω–æ ${bookmarkNotifications.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–∫–ª–∞–¥–∫–æ–π:`,
      );
      bookmarkNotifications.forEach((notif, index) => {
        const status = notif.is_read ? '‚úÖ' : 'üîî';
        console.log(`${index + 1}. ${status} [${notif.type}] ${notif.title}`);
      });
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    await db('notifications').where('related_entity_id', chapter.id).delete();
    await db('notifications').where('related_entity_id', book.id).delete();
    await db('chapter').where('id', chapter.id).delete();
    await db('bookmark').where('book_id', book.id).delete();
    await db('book').where('id', book.id).delete();
    await db('user_subscriber')
      .where({
        user_id: author.id,
        subscriber_id: subscriber.id,
      })
      .delete();

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await db.destroy();
  }
}

testNotificationIntegration();
