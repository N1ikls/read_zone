import knex from 'knex';

const db = knex({
  client: 'pg',
  connection: {
    port: 5432,
    host: 'localhost',
    user: 'postgres',
    password: 'postgres',
    database: 'read_zone_db',
  }
});

async function createTables() {
  try {
    console.log('üóÇÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    await db.schema.dropTableIfExists('notification_groups');
    await db.schema.dropTableIfExists('user_notification_settings');
    await db.schema.dropTableIfExists('notifications');
    
    console.log('üßπ –°—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await db.schema.createTable('notifications', (table) => {
      table.uuid('id').primary().defaultTo(db.raw('gen_random_uuid()'));
      table.uuid('user_id').unsigned().notNullable().references('user.id').onDelete('CASCADE');
      table.enu('type', [
        'user_new_book',        // –ù–æ–≤–∞—è –∫–Ω–∏–≥–∞ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
        'user_new_chapter',     // –ù–æ–≤–∞—è –≥–ª–∞–≤–∞ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏  
        'user_book_status',     // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–Ω–∏–≥–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        'book_new_chapter',     // –ù–æ–≤–∞—è –≥–ª–∞–≤–∞ –≤ –∑–∞–∫–ª–∞–¥–∫–µ
        'book_updated',         // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –≤ –∑–∞–∫–ª–∞–¥–∫–µ
        'book_rating_changed',  // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–Ω–∏–≥–∏
        'comment_reply',        // –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        'comment_on_content',   // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–∞—à–µ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
        'comment_liked',        // –õ–∞–π–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        'system_moderation',    // –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        'system_announcement',  // –û–±—ä—è–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        'system_maintenance'    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã
      ]).notNullable();
      table.string('title', 255).notNullable();
      table.text('message').notNullable();
      table.boolean('is_read').notNullable().defaultTo(false);
      table.datetime('created_at').notNullable().defaultTo(db.fn.now());
      table.uuid('related_entity_id').nullable();
      table.enu('related_entity_type', ['book', 'chapter', 'comment', 'user']).nullable();
      table.json('metadata').nullable();
      
      // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      table.index('user_id');
      table.index(['user_id', 'is_read']);
      table.index(['user_id', 'created_at']);
      table.index('type');
      table.index('created_at');
      table.index(['related_entity_id', 'related_entity_type']);
    });
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ notifications —Å–æ–∑–¥–∞–Ω–∞');

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await db.schema.createTable('user_notification_settings', (table) => {
      table.uuid('user_id').primary().references('user.id').onDelete('CASCADE');
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      table.boolean('user_new_book_enabled').notNullable().defaultTo(true);
      table.boolean('user_new_chapter_enabled').notNullable().defaultTo(true);
      table.boolean('user_book_status_enabled').notNullable().defaultTo(true);
      table.boolean('book_new_chapter_enabled').notNullable().defaultTo(true);
      table.boolean('book_updated_enabled').notNullable().defaultTo(true);
      table.boolean('book_rating_changed_enabled').notNullable().defaultTo(false);
      table.boolean('comment_reply_enabled').notNullable().defaultTo(true);
      table.boolean('comment_on_content_enabled').notNullable().defaultTo(true);
      table.boolean('comment_liked_enabled').notNullable().defaultTo(false);
      table.boolean('system_moderation_enabled').notNullable().defaultTo(true);
      table.boolean('system_announcement_enabled').notNullable().defaultTo(true);
      table.boolean('system_maintenance_enabled').notNullable().defaultTo(true);
      
      // Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      table.boolean('email_notifications_enabled').notNullable().defaultTo(false);
      table.boolean('email_digest_enabled').notNullable().defaultTo(false);
      table.enu('email_digest_frequency', ['daily', 'weekly', 'monthly']).defaultTo('weekly');
      
      table.datetime('created_at').notNullable().defaultTo(db.fn.now());
      table.datetime('updated_at').nullable();
    });
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_notification_settings —Å–æ–∑–¥–∞–Ω–∞');

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await db.schema.createTable('notification_groups', (table) => {
      table.uuid('id').primary().defaultTo(db.raw('gen_random_uuid()'));
      table.uuid('user_id').unsigned().notNullable().references('user.id').onDelete('CASCADE');
      table.string('group_key', 255).notNullable(); // –ö–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
      table.string('title', 255).notNullable();
      table.text('summary').notNullable();
      table.integer('count').notNullable().defaultTo(1);
      table.boolean('is_read').notNullable().defaultTo(false);
      
      table.datetime('created_at').notNullable().defaultTo(db.fn.now());
      table.datetime('updated_at').notNullable().defaultTo(db.fn.now());
      
      table.index('user_id');
      table.index(['user_id', 'group_key']);
      table.index(['user_id', 'is_read']);
      table.unique(['user_id', 'group_key']);
    });
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ notification_groups —Å–æ–∑–¥–∞–Ω–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const tables = await db.raw("SELECT table_name FROM information_schema.tables WHERE table_name IN ('notifications', 'user_notification_settings', 'notification_groups')");
    console.log('üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', tables.rows.map(r => r.table_name));
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    await db.raw(`
      INSERT INTO user_notification_settings (user_id)
      SELECT id FROM "user"
      ON CONFLICT (user_id) DO NOTHING
    `);
    
    const settingsCount = await db('user_notification_settings').count('* as count').first();
    console.log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è ${settingsCount.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü:', error);
  } finally {
    await db.destroy();
  }
}

createTables();
