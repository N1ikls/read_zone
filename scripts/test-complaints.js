/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∂–∞–ª–æ–±
 */

import knex from '../knex.js';

async function testComplaints() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∂–∞–ª–æ–±...\n');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü:');
    
    const complaintsTable = await knex.schema.hasTable('complaints');
    console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ complaints: ${complaintsTable ? '—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–ù–ï –ù–ê–ô–î–ï–ù–ê'}`);
    
    const userBansTable = await knex.schema.hasTable('user_bans');
    console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_bans: ${userBansTable ? '—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–ù–ï –ù–ê–ô–î–ï–ù–ê'}`);
    
    const teamCommentTable = await knex.schema.hasTable('team_comment');
    console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ team_comment: ${teamCommentTable ? '—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–ù–ï –ù–ê–ô–î–ï–ù–ê'}\n`);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∂–∞–ª–æ–±—ã
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∞–ª–æ–±:');
    const complaintsCount = await knex('complaints').count('* as count').first();
    console.log(`üìà –í—Å–µ–≥–æ –∂–∞–ª–æ–±: ${complaintsCount.count}`);

    const complaintsByType = await knex('complaints')
      .select('type')
      .count('* as count')
      .groupBy('type');
    
    console.log('üìä –ñ–∞–ª–æ–±—ã –ø–æ —Ç–∏–ø–∞–º:');
    complaintsByType.forEach(row => {
      console.log(`  - ${row.type}: ${row.count}`);
    });

    const complaintsByStatus = await knex('complaints')
      .select('status')
      .count('* as count')
      .groupBy('status');
    
    console.log('üìä –ñ–∞–ª–æ–±—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
    complaintsByStatus.forEach(row => {
      console.log(`  - ${row.status}: ${row.count}`);
    });

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞–Ω—ã
    console.log('\nüö´ –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    const activeBans = await knex('user_bans')
      .where('is_active', true)
      .where(function() {
        this.whereNull('expires_at').orWhere('expires_at', '>', new Date());
      })
      .select('type', 'reason', 'created_at', 'expires_at');

    if (activeBans.length > 0) {
      activeBans.forEach(ban => {
        const expiresText = ban.expires_at ? `–¥–æ ${ban.expires_at}` : '–ø–æ—Å—Ç–æ—è–Ω–Ω–æ';
        console.log(`  - ${ban.type}: ${ban.reason} (${expiresText})`);
      });
    } else {
      console.log('  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π');
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–æ–º–∞–Ω–¥
    console.log('\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–æ–º–∞–Ω–¥:');
    const teamCommentsCount = await knex('team_comment').count('* as count').first();
    console.log(`üìà –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${teamCommentsCount.count}`);

    const recentComments = await knex('team_comment')
      .select('id', 'content', 'created_at', 'created_by')
      .orderBy('created_at', 'desc')
      .limit(3);

    if (recentComments.length > 0) {
      console.log('üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:');
      recentComments.forEach(comment => {
        const content = comment.content.length > 50 
          ? comment.content.substring(0, 50) + '...' 
          : comment.content;
        console.log(`  - ${comment.id}: "${content}" (${comment.created_at})`);
      });
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await knex.destroy();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testComplaints();
