import knex from 'knex';

const db = knex({
  client: 'pg',
  connection: {
    port: 5432,
    host: 'localhost',
    user: 'postgres',
    password: 'postgres',
    database: 'read_zone_db',
  }
});

async function createTestNotifications() {
  try {
    console.log('üîî –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db('user').select('id', 'name', 'email').first();
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    console.log(`üë§ –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.name} (${user.email})`);
    
    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notifications = [
      {
        user_id: user.id,
        type: 'user_new_book',
        title: '–ù–æ–≤–∞—è –∫–Ω–∏–≥–∞ –æ—Ç –∞–≤—Ç–æ—Ä–∞',
        message: '–ê–≤—Ç–æ—Ä "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤" –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –Ω–æ–≤—É—é –∫–Ω–∏–≥—É "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≤ –∫–æ—Å–º–æ—Å–µ"',
        related_entity_type: 'book',
        metadata: JSON.stringify({ author_name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', book_title: '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≤ –∫–æ—Å–º–æ—Å–µ' })
      },
      {
        user_id: user.id,
        type: 'user_new_chapter',
        title: '–ù–æ–≤–∞—è –≥–ª–∞–≤–∞',
        message: '–í –∫–Ω–∏–≥–µ "–ú–∞–≥–∏—è –∏ –¥—Ä–∞–∫–æ–Ω—ã" –ø–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è –≥–ª–∞–≤–∞ "–ë–∏—Ç–≤–∞ —Å –¥—Ä–∞–∫–æ–Ω–æ–º"',
        related_entity_type: 'chapter',
        metadata: JSON.stringify({ book_title: '–ú–∞–≥–∏—è –∏ –¥—Ä–∞–∫–æ–Ω—ã', chapter_title: '–ë–∏—Ç–≤–∞ —Å –¥—Ä–∞–∫–æ–Ω–æ–º' })
      },
      {
        user_id: user.id,
        type: 'comment_reply',
        title: '–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ú–∞—Ä–∏—è" –æ—Ç–≤–µ—Ç–∏–ª–∞ –Ω–∞ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
        related_entity_type: 'comment',
        metadata: JSON.stringify({ replier_name: '–ú–∞—Ä–∏—è' })
      },
      {
        user_id: user.id,
        type: 'book_new_chapter',
        title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏',
        message: '–í –∫–Ω–∏–≥–µ –∏–∑ –≤–∞—à–∏—Ö –∑–∞–∫–ª–∞–¥–æ–∫ "–¢–∞–π–Ω—ã –≤—Å–µ–ª–µ–Ω–Ω–æ–π" –ø–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è –≥–ª–∞–≤–∞',
        related_entity_type: 'book',
        metadata: JSON.stringify({ book_title: '–¢–∞–π–Ω—ã –≤—Å–µ–ª–µ–Ω–Ω–æ–π' })
      },
      {
        user_id: user.id,
        type: 'system_announcement',
        title: '–°–∏—Å—Ç–µ–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ',
        message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!',
        related_entity_type: null,
        metadata: JSON.stringify({ announcement_type: 'feature_update' })
      }
    ];
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await db('notifications').insert(notifications);
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${notifications.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã
    const count = await db('notifications')
      .where('user_id', user.id)
      .count('* as count')
      .first();
      
    console.log(`üìä –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${count.count}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const created = await db('notifications')
      .where('user_id', user.id)
      .orderBy('created_at', 'desc')
      .limit(5)
      .select('type', 'title', 'is_read', 'created_at');
      
    console.log('\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:');
    created.forEach((notif, index) => {
      const status = notif.is_read ? '‚úÖ' : 'üîî';
      console.log(`${index + 1}. ${status} [${notif.type}] ${notif.title}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  } finally {
    await db.destroy();
  }
}

createTestNotifications();
